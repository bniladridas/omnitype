name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning: v1.0.0, v2.1.3, etc.

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt, clippy
          override: true

      - name: Generate Changelog and Diffs
        id: changelog
        run: |
          # Install GitHub CLI
          if ! command -v gh &> /dev/null; then
              echo "Installing GitHub CLI..."
              if [[ "$RUNNER_OS" == "macOS" ]]; then
                  brew install gh
              elif [[ "$RUNNER_OS" == "Linux" ]]; then
                  sudo apt-get update && sudo apt-get install -y gh
              fi
          fi
          
          # Generate code diffs
          mkdir -p scripts
          cp .github/scripts/generatecodediffs.sh scripts/
          chmod +x scripts/generatecodediffs.sh
          ./scripts/generatecodediffs.sh
          
          # Generate basic changelog
          echo "## Changes in ${{ github.ref_name }}" > CHANGES.md
          echo "" >> CHANGES.md
          echo "### Commits" >> CHANGES.md
          git log --pretty=format:'- %h %s (%an)' $(git describe --tags --abbrev=0 ${{ github.ref }}^)..${{ github.ref }} >> CHANGES.md
          
          # Append code diffs
          echo "" >> CHANGES.md
          echo "### Code Diffs" >> CHANGES.md
          echo "" >> CHANGES.md
          echo '```diff' >> CHANGES.md
          git diff $(git describe --tags --abbrev=0 ${{ github.ref }}^)..${{ github.ref }} -- . ':(exclude)*.md' ':(exclude)Cargo.lock' >> CHANGES.md || echo "No code changes" >> CHANGES.md
          echo '```' >> CHANGES.md
          
          # Set output for release body
          CHANGES=$(cat CHANGES.md)
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.ref_name }}
          body: |
            ${{ steps.changelog.outputs.changes }}
            
            ## Installation
            
            ### macOS
            ```bash
            brew install omnitype
            ```
            
            ### Linux
            ```bash
            # Download the appropriate binary
            curl -L https://github.com/bniladridas/omnitype/releases/download/${{ github.ref_name }}/omnitype-x86_64-unknown-linux-gnu -o /usr/local/bin/omnitype
            chmod +x /usr/local/bin/omnitype
            ```
            
            ### Windows
            ```powershell
            # Using Scoop
            scoop bucket add omnitype https://github.com/bniladridas/omnitype.git
            scoop install omnitype
            ```
          tag: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false

  build:
    name: Build ${{ matrix.target }}
    needs: release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: '.exe'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build
        run: |
          # Build with release profile and debug symbols
          RUSTFLAGS='-C debuginfo=2' cargo build --release --target ${{ matrix.target }}
          
          # Create release directory
          mkdir -p release
          
          # Copy binary
          cp target/${{ matrix.target }}/release/omnitype${{ matrix.ext }} release/
          
          # Generate debug symbols if on Linux/macOS
          if [[ "${{ matrix.target }}" == *"linux"* || "${{ matrix.target }}" == *"apple"* ]]; then
            objcopy --only-keep-debug target/${{ matrix.target }}/release/omnitype${{ matrix.ext }} release/omnitype${{ matrix.ext }}.debug
            strip --strip-debug --strip-unneeded release/omnitype${{ matrix.ext }}
            objcopy --add-gnu-debuglink=release/omnitype${{ matrix.ext }}.debug release/omnitype${{ matrix.ext }}
          fi
          
          # Create checksums
          cd release
          shasum -a 256 omnitype* > SHA256SUMS
          cd ..

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: omnitype-${{ matrix.target }}
          path: release/

  publish:
    name: Publish to crates.io
    needs: [release, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
